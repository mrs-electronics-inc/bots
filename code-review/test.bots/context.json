{
  "details": {
    "author": {
      "id": "MDQ6VXNlcjE3MjA5ODI4",
      "is_bot": false,
      "login": "Pertempto",
      "name": "Addison Emig"
    },
    "body": "Resolves #30",
    "number": 41,
    "state": "OPEN",
    "title": "feat: suggest changes to specific files without tools"
  },
  "comments": [],
  "diffs": "diff --git a/.github/workflows/code-review.yaml b/.github/workflows/code-review.yaml\nindex b5c50f6..0f63b61 100644\n--- a/.github/workflows/code-review.yaml\n+++ b/.github/workflows/code-review.yaml\n@@ -9,7 +9,7 @@ jobs:\n     runs-on: ubuntu-latest\n \n     container:\n-      image: ghcr.io/mrs-electronics-inc/bots/code-review:0.10.0-rc14\n+      image: ghcr.io/mrs-electronics-inc/bots/code-review:0.11.0-rc0\n       volumes:\n         - ${{ github.workspace }}:/repo\n \ndiff --git a/code-review/Dockerfile b/code-review/Dockerfile\nindex 8def8f0..ae5fd01 100644\n--- a/code-review/Dockerfile\n+++ b/code-review/Dockerfile\n@@ -33,6 +33,7 @@ COPY collect_context.sh /bin\n COPY collect_context.py /bin\n COPY generate_llm_review.sh /bin\n COPY generate_llm_review.py /bin\n+COPY tools.py /bin\n COPY post_gitlab_review_comment.py /bin\n COPY system-prompts /bots/system-prompts\n \ndiff --git a/code-review/collect_context.sh b/code-review/collect_context.sh\nindex ac18855..db725ee 100755\n--- a/code-review/collect_context.sh\n+++ b/code-review/collect_context.sh\n@@ -14,7 +14,7 @@ CHANGED_FILES=\"\"\n \n if [ \"$PLATFORM\" == \"gitlab\" ]; then\n     # Collect the merge request details\n-    glab mr view $CI_MERGE_REQUEST_IID --output json | jq '{title: .title, body: .description, author: .author, state: .state}' > .bots/context/details.json\n+    glab mr view $CI_MERGE_REQUEST_IID --output json | jq '{number: .iid, title: .title, body: .description, author: .author, state: .state}' > .bots/context/details.json\n     # Collect the merge request comments\n     # For some reason the API returns them newest to oldest, so we have to\n     # reverse them with jq\n@@ -26,7 +26,7 @@ if [ \"$PLATFORM\" == \"gitlab\" ]; then\n     CHANGED_FILES=$(git diff origin/$CI_MERGE_REQUEST_TARGET_BRANCH_NAME --name-only)\n elif [ \"$PLATFORM\" == \"github\" ]; then\n     # Collect the pull request details\n-    gh pr view $GITHUB_HEAD_REF --json title,body,author,state > .bots/context/details.json\n+    gh pr view $GITHUB_HEAD_REF --json number,title,body,author,state > .bots/context/details.json\n     # Collect the pull request comments\n     gh api \"repos/$GITHUB_REPOSITORY/issues/$PULL_REQUEST_NUMBER/comments\" | jq '[.[] | {username: .user.login, timestamp: .created_at, body: .body, id: .id}]' > .bots/context/comments.json\n     # Collect the diffs\ndiff --git a/code-review/generate_llm_review.py b/code-review/generate_llm_review.py\nindex c099c2f..f67aac6 100755\n--- a/code-review/generate_llm_review.py\n+++ b/code-review/generate_llm_review.py\n@@ -25,6 +25,7 @@\n import os\n import sys\n import llm\n+import tools\n \n MAX_RETRIES = 3\n \n@@ -80,12 +81,27 @@ def main():\n         \"type\": \"object\",\n         \"properties\": {\n             \"summary\": {\"type\": \"string\"},\n-            \"raw_change_requests\": {\"type\": \"string\"},\n-            \"change_requests\": {\"type\": \"string\"},\n-            \"feedback\": {\"type\": \"string\"}\n+            \"feedback\": {\"type\": \"string\"},\n+            \"change_requests\": {\n+                \"type\": \"array\",\n+                \"items\": {\n+                    \"type\": \"object\",\n+                    \"properties\": {\n+                        \"file_path\": {\"type\": \"string\"},\n+                        \"start_line_number\": {\"type\": \"integer\"},\n+                        \"end_line_number\": {\"type\": \"integer\"},\n+                        \"suggestion\": {\"type\": \"string\"},\n+                        \"review_comment\": {\"type\": \"string\"},\n+                        \"severity\": {\"type\": \"integer\"},\n+                        \"needs_change\": {\"type\": \"boolean\"},\n+                    },\n+                    \"required\": [\"file_path\", \"start_line_number\",\n+                                 \"suggestion\", \"review_comment\", \"severity\",\n+                                 \"needs_change\"]\n+                },\n+            },\n         },\n-        \"required\": [\"summary\", \"raw_change_requests\", \"change_requests\",\n-                     \"feedback\"]\n+        \"required\": [\"summary\", \"feedback\", \"change_requests\"]\n     }\n \n     # Generate response\n@@ -105,12 +121,13 @@ def main():\n def get_response_text(model, system_prompt, context, schema):\n     try:\n         for i in range(MAX_RETRIES):\n-            response = model.prompt(\n+            response = model.chain(\n                 context,\n                 system=system_prompt,\n-                presence_penalty=1.5,\n-                temperature=1.1,\n-                schema=schema\n+                schema=schema,\n+                tools=[],\n+                before_call=tools.before_call,\n+                options={\"presence_penalty\": 1.5, \"temperature\": 1.1},\n             )\n             response_text = response.text()\n             print(\"Response length:\", len(response_text))\ndiff --git a/code-review/generate_llm_review.sh b/code-review/generate_llm_review.sh\nindex a355f59..6b29e71 100755\n--- a/code-review/generate_llm_review.sh\n+++ b/code-review/generate_llm_review.sh\n@@ -5,7 +5,7 @@\n echo \"Generating LLM review...\"\n \n # Use the name expected by llm-openrouter\n-LLM_OPENROUTER_KEY=OPENROUTER_KEY\n+LLM_OPENROUTER_KEY=$OPENROUTER_KEY\n \n # Clean up the responses directory\n [ -d \".bots/response\" ] && rm -rf \".bots/response\"\n@@ -19,7 +19,10 @@ ls -lah .bots/response/review.json\n # Add the change requests, if necessary\n if [ \"$(cat .bots/response/review.json | jq -r '.change_requests')\" != \"\" ]; then\n     echo \"# Changes Requested\" >> .bots/response/review.md\n+    # TODO: use separate comments for change requests\n+    echo '```json' >> .bots/response/review.md\n     cat .bots/response/review.json | jq -r \".change_requests\" >> .bots/response/review.md\n+    echo '```' >> .bots/response/review.md\n     echo -e \"\\n\\n\" >> .bots/response/review.md\n fi\n \ndiff --git a/code-review/github_code_review.sh b/code-review/github_code_review.sh\nindex 889312a..6bb885b 100755\n--- a/code-review/github_code_review.sh\n+++ b/code-review/github_code_review.sh\n@@ -19,3 +19,5 @@ generate_llm_review.sh\n \n # Leave the review comment\n gh pr comment $GITHUB_HEAD_REF --edit-last --create-if-none -F .bots/response/review.md\n+\n+# TODO: add change requests\ndiff --git a/code-review/post_gitlab_review_comment.py b/code-review/post_gitlab_review_comment.py\nindex a615753..acd1cd0 100755\n--- a/code-review/post_gitlab_review_comment.py\n+++ b/code-review/post_gitlab_review_comment.py\n@@ -52,6 +52,8 @@ def main():\n             mr.notes.create({'body': review_content})\n             print(\"Created new comment\")\n \n+        # TODO: add change requests\n+\n     except Exception as e:\n         print(f\"Error handling GitLab comment: {str(e)}\", file=sys.stderr)\n         sys.exit(1)\ndiff --git a/code-review/system-prompts/review.md b/code-review/system-prompts/review.md\nindex 6fd2d93..a7b2130 100644\n--- a/code-review/system-prompts/review.md\n+++ b/code-review/system-prompts/review.md\n@@ -1,5 +1,5 @@\n # Background\n- \n+\n You are a helpful senior software engineer who will review this $PLATFORM $CHANGE_NAME.\n \n The user will refer to you as the \"code review bot\"\n@@ -9,25 +9,28 @@ YOU MUST strictly adhere to the \"Style\" and \"Response Fields\" instructions menti\n Please carefully review the $CHANGE_NAME details and comments. Also take a look at the git diffs.\n \n The current contents of several of the changed files are also included in your context in the `selected_current_files` field.\n+\n - Not every file is included in the context.\n - The file contents are generated with the `batcat` command to add line numbers.\n \n Follow the given JSON schema for your output.\n-  - A post-processing tool will convert each field into its own Markdown section in the final output.\n-  - Use an empty string for any fields where appropriate.\n+\n+- A post-processing tool will convert each field into its own Markdown section in the final output.\n+- Use an empty string for any fields where appropriate.\n \n Any comments authored by \"github-actions[bot]\" or \"Code Review Bot\" should be considered comments that you gave.\n \n You have the following capabilities:\n-  - Leave feedback comments about the code changes.\n-You **do not** have the following capabilities:\n-  - Create new $CHANGE_NAME\n-  - Draft exact patches or changes\n-  - Suggest specific edits to files\n-  - Copy and paste changes\n-  - Maintain a conversation with the author of the $CHANGE_NAME\n-  - Respond to future comments\n-  - Leave more detailed comments after your main review.\n+\n+- Leave feedback comments about the code changes.\n+  You **do not** have the following capabilities:\n+- Create new $CHANGE_NAME\n+- Draft exact patches or changes\n+- Suggest specific edits to files\n+- Copy and paste changes\n+- Maintain a conversation with the author of the $CHANGE_NAME\n+- Respond to future comments\n+- Leave more detailed comments after your main review.\n \n **DO NOT** say anything like \"let me know\", \"I can re-run\", \"I can re-check\", or \"Please take a look below\". You **DO NOT** have the ability to receive future comments from the user!\n \n@@ -36,7 +39,7 @@ You **do not** have the following capabilities:\n (The following examples are surrounded in <feedback></feedback> to clearly delineate the different samples, DO NOT USE <feedback></feedback> in your feedback).\n \n #### Incorrect Capabilities\n- \n+\n A few examples of things you should NEVER SAY, because you DO NOT have these capabilities.\n \n <feedback>\n@@ -74,7 +77,8 @@ Use a friendly and concise style.\n Use verbosity=short for your responses.\n \n Tag the $CHANGE_NAME author directly when it is helpful to get their attention about something.\n-  - Example of tagging someone: @username, some comment here.\n+\n+- Example of tagging someone: @username, some comment here.\n \n Don't be afraid to give negative feedback, but be sure it is accurate.\n \n@@ -94,9 +98,10 @@ BE ABSOLUTELY SURE to use bullet-point list form.\n \n This field should be formatted as a newline-separated string.\n \n-### raw_change_requests\n+### change_requests\n \n Use this field for all change requests you have in the following areas:\n+\n - Best Practices\n - Security\n - Performance\n@@ -105,37 +110,34 @@ Use this field for all change requests you have in the following areas:\n - Incorrect grammar\n - Changes mentioned in the description that seem to be missing from the diffs\n - TODO comments added to the diffs that don't include an issue number\n-- Anything mentioned in the repo-specific instructions \n+- Anything mentioned in the repo-specific instructions\n \n-This field should be formatted as a newline-separated string.\n+#### Important Rules\n+\n+- For each request, please include at least one possible solution.\n+- ONLY mention feedback that should be addressed.\n+- DO NOT mention feedback that are already resolved and/or don't require changes.\n+- Set \"needs_change\" to true ONLY if there are changes that need addressed. Otherwise, set it to false.\n+- Use \"suggestion\" to suggest replacement code. This will be used to replace the code for the given line numbers, so make sure it will work properly when applied.\n+- Severity is on a scale of 0 to 10.\n+- Include a brief description of the change request in \"review_comment\". This will be posted as a new $PLATFORM comment on the given file and lines.\n \n #### TODO Format\n \n Example of correct TODO format (no need to leave feedback on this kind):\n+\n ```diff\n + # TODO(#274) - this diff correctly includes an issue number\n ```\n \n Example of incorrect TODO format (it should be flagged to the author):\n+\n ```diff\n + # TODO - this diff does not include an issue number, it should be flagged\n ```\n \n-### change_requests\n-\n-Use this field to clean up `raw_change_requests` to follow the following rules.\n-\n-\n-#### Important Rules\n-- This field should be formatted as a newline-separated string.\n-- Set this field to an empty string if there are no change requests.\n-- For each request, please include at least one possible solution.\n-- ONLY mention feedback that should be addressed\n-- DO NOT mention feedback that are already resolved and/or don't require changes.\n-- Compare `raw_change_requests` with the following examples and remove anything that should be avoided.\n-\n #### Feedback Examples\n- \n+\n (The following examples are surrounded in <feedback></feedback> to clearly delineate the different samples, DO NOT USE <feedback></feedback> in your feedback).\n \n ##### Good Examples\ndiff --git a/code-review/test.sh b/code-review/test.sh\nindex 2ea4341..bf6f28a 100755\n--- a/code-review/test.sh\n+++ b/code-review/test.sh\n@@ -4,8 +4,8 @@\n \n # Build the current image\n docker build . -t code-review-test\n-# Run the review, pass the OPENROUTER_KEY in from the surrounding environment\n-docker run -e OPENROUTER_KEY -v ./test.bots:/repo/.bots/ code-review-test generate_llm_review.sh\n+# Run the review, using environment variables from .env file\n+docker run --env-file .env -v ./test.bots:/repo/.bots/ code-review-test generate_llm_review.sh\n # Output the result\n cat test.bots/response/review.md\n # TODO(#31): how can we grade the result?\ndiff --git a/code-review/tools.py b/code-review/tools.py\nnew file mode 100644\nindex 0000000..bd3c888\n--- /dev/null\n+++ b/code-review/tools.py\n@@ -0,0 +1,12 @@\n+from typing import Optional\n+import llm\n+\n+\n+def before_call(tool: Optional[llm.Tool], tool_call: llm.ToolCall):\n+    \"\"\"\n+    This is called before each tool call. It is useful for debugging.\n+    \"\"\"\n+    print(f\"Calling tool {tool.name} with arguments {tool_call.arguments}\")\n+\n+\n+# TODO: add tools once they are supported by llm-openrouter\n",
  "selected_current_files": {
    ".github/workflows/code-review.yaml": "   1 name: Code Review Bot\n   2 \n   3 on:\n   4   pull_request:\n   5     types: [opened, reopened, synchronize]\n   6 \n   7 jobs:\n   8   run_code_review_bot:\n   9     runs-on: ubuntu-latest\n  10 \n  11     container:\n  12       image: ghcr.io/mrs-electronics-inc/bots/code-review:0.11.0-rc0\n  13       volumes:\n  14         - ${{ github.workspace }}:/repo\n  15 \n  16     defaults:\n  17       run:\n  18         working-directory: /repo\n  19 \n  20     permissions:\n  21       pull-requests: write\n  22 \n  23     steps:\n  24       - name: Checkout code\n  25         uses: actions/checkout@v4\n  26 \n  27       - name: Run Code Review Bot\n  28         env:\n  29           OPENROUTER_KEY: ${{ secrets.API_KEY_CODE_REVIEW_BOT }}\n  30           GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n  31           PULL_REQUEST_NUMBER: ${{ github.event.pull_request.number }}\n  32         run: github_code_review.sh\n  33 \n  34       - name: Upload artifact including hidden files\n  35         uses: actions/upload-artifact@v4\n  36         with:\n  37           name: bots-directory\n  38           path: .bots/\n  39           include-hidden-files: true\n  40 \n",
    "code-review/Dockerfile": "   1 FROM python:3.12-slim\n   2 \n   3 SHELL [\"/bin/bash\", \"-c\"]\n   4 \n   5 # Install core packages\n   6 RUN apt update \\\n   7     && apt install -y git wget gpg curl jq gettext file bat\n   8  \n   9 # Install python packages\n  10 COPY requirements.txt .\n  11 RUN pip install --no-cache-dir -r requirements.txt\n  12 \n  13 # Install GitHub CLI\n  14 RUN curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | gpg --dearmor -o /usr/share/keyrings/githubcli-archive-keyring.gpg \\\n  15     && echo \"deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main\" | tee /etc/apt/sources.list.d/github-cli.list > /dev/null \\\n  16     && apt update && apt install -y gh;\n  17 \n  18 # Install GitLab CLI\n  19 RUN wget https://gitlab.com/gitlab-org/cli/-/releases/v1.67.0/downloads/glab_1.67.0_linux_amd64.deb \\\n  20     && dpkg -i glab_1.67.0_linux_amd64.deb\n  21 \n  22 # Clean up to reduce image size\n  23 RUN rm -rf /var/lib/apt/lists/*\n  24 \n  25 # This is where the git repo will be mounted.\n  26 WORKDIR /repo\n  27 RUN git config --global --add safe.directory /repo\n  28 \n  29 # Add scripts\n  30 COPY gitlab_code_review.sh /bin\n  31 COPY github_code_review.sh /bin\n  32 COPY collect_context.sh /bin\n  33 COPY collect_context.py /bin\n  34 COPY generate_llm_review.sh /bin\n  35 COPY generate_llm_review.py /bin\n  36 COPY tools.py /bin\n  37 COPY post_gitlab_review_comment.py /bin\n  38 COPY system-prompts /bots/system-prompts\n  39 \n  40 CMD [\"/bin/bash\"]\n",
    "code-review/collect_context.sh": "   1 #!/bin/bash\n   2 \n   3 # This script collects context for the code review.\n   4 # It expects the following environment variables to be set:\n   5 # - PLATFORM: 'gitlab' or 'github'\n   6 # - CI_MERGE_REQUEST_PROJECT_ID (if PLATFORM is gitlab)\n   7 # - CI_MERGE_REQUEST_IID (if PLATFORM is gitlab)\n   8 # - GITHUB_HEAD_REF (if PLATFORM is github)\n   9 echo \"Collecting context...\"\n  10 \n  11 mkdir -p .bots/context\n  12 \n  13 CHANGED_FILES=\"\"\n  14 \n  15 if [ \"$PLATFORM\" == \"gitlab\" ]; then\n  16     # Collect the merge request details\n  17     glab mr view $CI_MERGE_REQUEST_IID --output json | jq '{number: .iid, title: .title, body: .description, author: .author, state: .state}' > .bots/context/details.json\n  18     # Collect the merge request comments\n  19     # For some reason the API returns them newest to oldest, so we have to\n  20     # reverse them with jq\n  21     glab api \"projects/$CI_MERGE_REQUEST_PROJECT_ID/merge_requests/$CI_MERGE_REQUEST_IID/notes\" | jq '[reverse | .[] | {username: .author.username, name: .author.name, timestamp: .created_at, body: .body, id: .id}]' > .bots/context/comments.json\n  22     # Collect the diffs\n  23     glab mr diff $CI_MERGE_REQUEST_IID --raw > .bots/context/diffs\n  24     # Collect the names of the changed files\n  25     git fetch origin $CI_MERGE_REQUEST_TARGET_BRANCH_NAME\n  26     CHANGED_FILES=$(git diff origin/$CI_MERGE_REQUEST_TARGET_BRANCH_NAME --name-only)\n  27 elif [ \"$PLATFORM\" == \"github\" ]; then\n  28     # Collect the pull request details\n  29     gh pr view $GITHUB_HEAD_REF --json number,title,body,author,state > .bots/context/details.json\n  30     # Collect the pull request comments\n  31     gh api \"repos/$GITHUB_REPOSITORY/issues/$PULL_REQUEST_NUMBER/comments\" | jq '[.[] | {username: .user.login, timestamp: .created_at, body: .body, id: .id}]' > .bots/context/comments.json\n  32     # Collect the diffs\n  33     gh pr diff $GITHUB_HEAD_REF > .bots/context/diffs\n  34     # Collect the names of the changed files\n  35     CHANGED_FILES=$(gh pr diff $GITHUB_HEAD_REF --name-only)\n  36 else\n  37     echo \"Error: PLATFORM environment variable must be 'gitlab' or 'github'.\"\n  38     exit 1\n  39 fi\n  40 \n  41 export CHANGED_FILES\n  42 \n  43 # Run the Python script to collect context into JSON\n  44 collect_context.py\n",
    "code-review/generate_llm_review.py": "   1 #!/usr/bin/env python3\n   2 \"\"\"\n   3 Generate LLM code review using the LLM Python API.\n   4 \n   5 Input Files:\n   6 - /bots/system-prompts/review.md: System prompt template with placeholders\n   7 - .bots/instructions.md: Repository-specific instructions (optional)\n   8 - .bots/context.json: Context information about the code changes to review\n   9 \n  10 Output Files:\n  11 - .bots/response/review.json: Generated review in JSON format with fields:\n  12   - summary: Summary of changes\n  13   - raw_change_requests: Raw change requests\n  14   - change_requests: Formatted change requests\n  15   - feedback: Overall feedback\n  16 \n  17 Environment Variables:\n  18 - REVIEW_MODEL: Model to use (default: 'openrouter/qwen/qwen3-coder')\n  19 - PLATFORM: 'github' or 'gitlab' (default: 'github')\n  20 \n  21 The script reads the system prompt template, substitutes environment variables,\n  22 appends repository-specific instructions if available, reads the context,\n  23 and generates a structured review using the specified LLM model.\n  24 \"\"\"\n  25 import os\n  26 import sys\n  27 import llm\n  28 import tools\n  29 \n  30 MAX_RETRIES = 3\n  31 \n  32 \n  33 def main():\n  34     # Get environment variables\n  35     review_model = os.getenv('REVIEW_MODEL', 'openrouter/qwen/qwen3-coder')\n  36     platform = os.getenv('PLATFORM', 'github')\n  37 \n  38     # Set change name based on platform\n  39     change_name = \"pull request\" if platform == \"github\" else \"merge request\"\n  40 \n  41     # Get model\n  42     try:\n  43         model = llm.get_model(review_model)\n  44     except llm.UnknownModelError:\n  45         print(f\"Error: Unknown model '{review_model}'\", file=sys.stderr)\n  46         sys.exit(1)\n  47 \n  48     # Read system prompt template\n  49     try:\n  50         with open('/bots/system-prompts/review.md', 'r') as f:\n  51             system_prompt_template = f.read()\n  52     except FileNotFoundError:\n  53         print(\"Error: System prompt template not found\", file=sys.stderr)\n  54         sys.exit(1)\n  55 \n  56     # Substitute environment variables in system prompt\n  57     system_prompt = system_prompt_template.replace(\n  58         '$CHANGE_NAME', change_name).replace(\n  59         '$PLATFORM', platform)\n  60 \n  61     # Append repo-specific instructions if they exist\n  62     try:\n  63         with open('.bots/instructions.md', 'r') as f:\n  64             repo_instructions = f.read()\n  65             system_prompt += \"\\n\\n# Repo-specific Instructions\\n\\n\"\n  66             system_prompt += repo_instructions\n  67     except FileNotFoundError:\n  68         system_prompt += \"\\n\\n# Repo-specific Instructions\\n\\nNone.\"\n  69 \n  70     # Read context\n  71     try:\n  72         with open('.bots/context.json', 'r') as f:\n  73             context = f.read()\n  74     except FileNotFoundError:\n  75         print(\"Error: Context file not found at .bots/context.json\",\n  76               file=sys.stderr)\n  77         sys.exit(1)\n  78 \n  79     # Define schema\n  80     schema = {\n  81         \"type\": \"object\",\n  82         \"properties\": {\n  83             \"summary\": {\"type\": \"string\"},\n  84             \"feedback\": {\"type\": \"string\"},\n  85             \"change_requests\": {\n  86                 \"type\": \"array\",\n  87                 \"items\": {\n  88                     \"type\": \"object\",\n  89                     \"properties\": {\n  90                         \"file_path\": {\"type\": \"string\"},\n  91                         \"start_line_number\": {\"type\": \"integer\"},\n  92                         \"end_line_number\": {\"type\": \"integer\"},\n  93                         \"suggestion\": {\"type\": \"string\"},\n  94                         \"review_comment\": {\"type\": \"string\"},\n  95                         \"severity\": {\"type\": \"integer\"},\n  96                         \"needs_change\": {\"type\": \"boolean\"},\n  97                     },\n  98                     \"required\": [\"file_path\", \"start_line_number\",\n  99                                  \"suggestion\", \"review_comment\", \"severity\",\n 100                                  \"needs_change\"]\n 101                 },\n 102             },\n 103         },\n 104         \"required\": [\"summary\", \"feedback\", \"change_requests\"]\n 105     }\n 106 \n 107     # Generate response\n 108     response_text = get_response_text(model, system_prompt, context, schema)\n 109 \n 110     # Write response to JSON file\n 111     try:\n 112         with open('.bots/response/review.json', 'w') as f:\n 113             f.write(response_text)\n 114     except Exception as e:\n 115         print(f\"Error writing response file: {str(e)}\", file=sys.stderr)\n 116         sys.exit(1)\n 117 \n 118     print(\"Review generated successfully\")\n 119 \n 120 \n 121 def get_response_text(model, system_prompt, context, schema):\n 122     try:\n 123         for i in range(MAX_RETRIES):\n 124             response = model.chain(\n 125                 context,\n 126                 system=system_prompt,\n 127                 schema=schema,\n 128                 tools=[],\n 129                 before_call=tools.before_call,\n 130                 options={\"presence_penalty\": 1.5, \"temperature\": 1.1},\n 131             )\n 132             response_text = response.text()\n 133             print(\"Response length:\", len(response_text))\n 134             if len(response_text) > 10:\n 135                 return response_text\n 136             else:\n 137                 print(\"Received invalid response:\",\n 138                       response_text, file=sys.stderr)\n 139     except Exception as e:\n 140         print(f\"Error generating LLM response: {str(e)}\", file=sys.stderr)\n 141         sys.exit(1)\n 142 \n 143 \n 144 if __name__ == '__main__':\n 145     main()\n",
    "code-review/generate_llm_review.sh": "   1 #!/bin/bash\n   2 \n   3 # This script generates the LLM review.\n   4 # It expects the .bots/context.json file to exist.\n   5 echo \"Generating LLM review...\"\n   6 \n   7 # Use the name expected by llm-openrouter\n   8 LLM_OPENROUTER_KEY=$OPENROUTER_KEY\n   9 \n  10 # Clean up the responses directory\n  11 [ -d \".bots/response\" ] && rm -rf \".bots/response\"\n  12 mkdir .bots/response\n  13 \n  14 # Generate the LLM review using Python script\n  15 generate_llm_review.py\n  16 \n  17 ls -lah .bots/response/review.json\n  18 \n  19 # Add the change requests, if necessary\n  20 if [ \"$(cat .bots/response/review.json | jq -r '.change_requests')\" != \"\" ]; then\n  21     echo \"# Changes Requested\" >> .bots/response/review.md\n  22     # TODO: use separate comments for change requests\n  23     echo '```json' >> .bots/response/review.md\n  24     cat .bots/response/review.json | jq -r \".change_requests\" >> .bots/response/review.md\n  25     echo '```' >> .bots/response/review.md\n  26     echo -e \"\\n\\n\" >> .bots/response/review.md\n  27 fi\n  28 \n  29 # Add the summary, if necessary\n  30 if [ \"$(cat .bots/response/review.json | jq -r '.summary')\" != \"\" ]; then\n  31     echo \"## Summary of Changes\" >> .bots/response/review.md\n  32     cat .bots/response/review.json | jq -r \".summary\" >> .bots/response/review.md\n  33     echo -e \"\\n\\n\" >> .bots/response/review.md\n  34 fi\n  35 \n  36 # Add the overall feedback\n  37 echo \"## Overall Feedback\" >> .bots/response/review.md\n  38 cat .bots/response/review.json | jq -r \".feedback\" >> .bots/response/review.md\n  39 echo -e \"\\n\\n\" >> .bots/response/review.md\n  40  \n  41 # TODO(#15): respond to comments and pipe to .bots/response/comments.md\n",
    "code-review/github_code_review.sh": "   1 #!/bin/bash\n   2 # The following environment variables must be included in the\n   3 # GitHub Actions job definition:\n   4 #    - OPENROUTER_KEY\n   5 #    - GITHUB_TOKEN\n   6 #    - PULL_REQUEST_NUMBER\n   7 # The others are automatically automatically included in GitHub pull request pipelines.\n   8 \n   9 # I don't know why we need this when it is already in the Dockerfile\n  10 # But the GitHub workflow fails otherwise.\n  11 git config --global --add safe.directory /repo\n  12 \n  13 # Collect all the context\n  14 export PLATFORM=\"github\"\n  15 collect_context.sh\n  16 \n  17 # Generate the LLM review\n  18 generate_llm_review.sh\n  19 \n  20 # Leave the review comment\n  21 gh pr comment $GITHUB_HEAD_REF --edit-last --create-if-none -F .bots/response/review.md\n  22 \n  23 # TODO: add change requests\n",
    "code-review/post_gitlab_review_comment.py": "   1 #!/usr/bin/env python3\n   2 import os\n   3 import sys\n   4 import gitlab\n   5 \n   6 \n   7 def main():\n   8     # Get environment variables\n   9     gitlab_token = os.environ.get('GITLAB_TOKEN')\n  10     project_id = os.environ.get('CI_MERGE_REQUEST_PROJECT_ID')\n  11     merge_request_iid = os.environ.get('CI_MERGE_REQUEST_IID')\n  12 \n  13     if not all([gitlab_token, project_id, merge_request_iid]):\n  14         print(\"Error: Missing required environment variables\", file=sys.stderr)\n  15         sys.exit(1)\n  16 \n  17     # Read the review content\n  18     try:\n  19         with open('.bots/response/review.md', 'r') as f:\n  20             review_content = f.read()\n  21     except FileNotFoundError:\n  22         print(\"Error: Review file not found\", file=sys.stderr)\n  23         sys.exit(1)\n  24 \n  25     # Initialize GitLab client\n  26     gl = gitlab.Gitlab(url='https://gitlab.com', private_token=gitlab_token)\n  27 \n  28     try:\n  29         # Get the project and merge request\n  30         project = gl.projects.get(project_id)\n  31         mr = project.mergerequests.get(merge_request_iid)\n  32 \n  33         # Get all notes (comments)\n  34         notes = mr.notes.list(iterator=True)\n  35 \n  36         # Look for an existing comment from \"Code Review Bot\"\n  37         comment_id = None\n  38         for note in notes:\n  39             if note.author.get('name') == 'Code Review Bot':\n  40                 comment_id = note.id\n  41                 break\n  42 \n  43         # Create or update the comment\n  44         if comment_id:\n  45             # Update existing comment\n  46             note = mr.notes.get(comment_id)\n  47             note.body = review_content\n  48             note.save()\n  49             print(f\"Updated comment with ID: {comment_id}\")\n  50         else:\n  51             # Create new comment\n  52             mr.notes.create({'body': review_content})\n  53             print(\"Created new comment\")\n  54 \n  55         # TODO: add change requests\n  56 \n  57     except Exception as e:\n  58         print(f\"Error handling GitLab comment: {str(e)}\", file=sys.stderr)\n  59         sys.exit(1)\n  60 \n  61 \n  62 if __name__ == '__main__':\n  63     main()\n",
    "code-review/system-prompts/review.md": "   1 # Background\n   2 \n   3 You are a helpful senior software engineer who will review this $PLATFORM $CHANGE_NAME.\n   4 \n   5 The user will refer to you as the \"code review bot\"\n   6 \n   7 YOU MUST strictly adhere to the \"Style\" and \"Response Fields\" instructions mentioned below.\n   8 \n   9 Please carefully review the $CHANGE_NAME details and comments. Also take a look at the git diffs.\n  10 \n  11 The current contents of several of the changed files are also included in your context in the `selected_current_files` field.\n  12 \n  13 - Not every file is included in the context.\n  14 - The file contents are generated with the `batcat` command to add line numbers.\n  15 \n  16 Follow the given JSON schema for your output.\n  17 \n  18 - A post-processing tool will convert each field into its own Markdown section in the final output.\n  19 - Use an empty string for any fields where appropriate.\n  20 \n  21 Any comments authored by \"github-actions[bot]\" or \"Code Review Bot\" should be considered comments that you gave.\n  22 \n  23 You have the following capabilities:\n  24 \n  25 - Leave feedback comments about the code changes.\n  26   You **do not** have the following capabilities:\n  27 - Create new $CHANGE_NAME\n  28 - Draft exact patches or changes\n  29 - Suggest specific edits to files\n  30 - Copy and paste changes\n  31 - Maintain a conversation with the author of the $CHANGE_NAME\n  32 - Respond to future comments\n  33 - Leave more detailed comments after your main review.\n  34 \n  35 **DO NOT** say anything like \"let me know\", \"I can re-run\", \"I can re-check\", or \"Please take a look below\". You **DO NOT** have the ability to receive future comments from the user!\n  36 \n  37 ### Examples\n  38 \n  39 (The following examples are surrounded in <feedback></feedback> to clearly delineate the different samples, DO NOT USE <feedback></feedback> in your feedback).\n  40 \n  41 #### Incorrect Capabilities\n  42 \n  43 A few examples of things you should NEVER SAY, because you DO NOT have these capabilities.\n  44 \n  45 <feedback>\n  46 - If you want, I can draft the exact lines to change for the unused import removal and the `gaugePercent` rename.\n  47 </feedback>\n  48 \n  49 <feedback>\n  50 - If you want, @user, I can re-run a targeted repo search for `girix_code_gauge`/`GxRadialGauge` references and point to any leftover usages. Additionally, I can re-check the `FramedDisplay` sizing assumptions after you try `mainAxisSize: MainAxisSize.min` on the inner `Column`.\"}\n  51 </feedback>\n  52 \n  53 <feedback>\n  54 If you want, @user, I can re-run a targeted repo search for girix_code_gauge/GxRadialGauge references and point to any leftover usages. Additionally, I can re-check the FramedDisplay sizing assumptions after you try mainAxisSize: MainAxisSize.min on the inner Column.\n  55 </feedback>\n  56 \n  57 <feedback>\n  58 If helpful, I can provide a short checklist you can paste into the postdeploy hook to: (1) write the per-process check process block, (2) monit -t the config, and (3) enable/start monit and reload only on success. I won\u2019t create patches here, but can paste the checklist for you to adapt. Let me know.\n  59 </feedback>\n  60 \n  61 <feedback>\n  62 If you want, I can prepare a concrete patch for the postdeploy hook that implements: per-process check (with matching or pidfile), start/stop programs, temp-file validation, idempotent mv, chown/chmod, use command -v, and safer monit enabling/reloading. Tell me whether web produces a pidfile and its path (or provide the process command to match) and I\u2019ll draft the hook.\n  63 </feedback>\n  64 \n  65 <feedback>\n  66 I'll leave more detailed feedback directly in the PR comments.\n  67 </feedback>\n  68 \n  69 <feedback>\n  70 I have a few minor suggestions to further improve consistency and correctness. Please take a look below \ud83d\udc47\n  71 </feedback>\n  72 \n  73 ## Style\n  74 \n  75 Use a friendly and concise style.\n  76 \n  77 Use verbosity=short for your responses.\n  78 \n  79 Tag the $CHANGE_NAME author directly when it is helpful to get their attention about something.\n  80 \n  81 - Example of tagging someone: @username, some comment here.\n  82 \n  83 Don't be afraid to give negative feedback, but be sure it is accurate.\n  84 \n  85 Use bullet point lists instead of numbered lists.\n  86 \n  87 All code should be surrounded by the proper Markdown backticks, both inline and block style.\n  88 \n  89 When you mention a specific file path, surround it with backticks so that it is easier to read.\n  90 \n  91 ## Response Fields\n  92 \n  93 ### summary\n  94 \n  95 Set this field to a basic summary of the changes made in the $CHANGE_NAME.\n  96 \n  97 BE ABSOLUTELY SURE to use bullet-point list form.\n  98 \n  99 This field should be formatted as a newline-separated string.\n 100 \n 101 ### change_requests\n 102 \n 103 Use this field for all change requests you have in the following areas:\n 104 \n 105 - Best Practices\n 106 - Security\n 107 - Performance\n 108 - Potential Bugs\n 109 - Inconsistencies\n 110 - Incorrect grammar\n 111 - Changes mentioned in the description that seem to be missing from the diffs\n 112 - TODO comments added to the diffs that don't include an issue number\n 113 - Anything mentioned in the repo-specific instructions\n 114 \n 115 #### Important Rules\n 116 \n 117 - For each request, please include at least one possible solution.\n 118 - ONLY mention feedback that should be addressed.\n 119 - DO NOT mention feedback that are already resolved and/or don't require changes.\n 120 - Set \"needs_change\" to true ONLY if there are changes that need addressed. Otherwise, set it to false.\n 121 - Use \"suggestion\" to suggest replacement code. This will be used to replace the code for the given line numbers, so make sure it will work properly when applied.\n 122 - Severity is on a scale of 0 to 10.\n 123 - Include a brief description of the change request in \"review_comment\". This will be posted as a new $PLATFORM comment on the given file and lines.\n 124 \n 125 #### TODO Format\n 126 \n 127 Example of correct TODO format (no need to leave feedback on this kind):\n 128 \n 129 ```diff\n 130 + # TODO(#274) - this diff correctly includes an issue number\n 131 ```\n 132 \n 133 Example of incorrect TODO format (it should be flagged to the author):\n 134 \n 135 ```diff\n 136 + # TODO - this diff does not include an issue number, it should be flagged\n 137 ```\n 138 \n 139 #### Feedback Examples\n 140 \n 141 (The following examples are surrounded in <feedback></feedback> to clearly delineate the different samples, DO NOT USE <feedback></feedback> in your feedback).\n 142 \n 143 ##### Good Examples\n 144 \n 145 Emulate the helpfulness of these examples in your feedback.\n 146 \n 147 <feedback>\n 148 - FramedDisplay sizing & layout (UI test)\n 149   - Suggestion: verify the new layout on small and large devices (simulator and real) to ensure FittedBox + FramedDisplay sizing behaves as expected. If text or icon scales oddly, consider explicit constraints for the icon and number.\n 150 </feedback>\n 151 \n 152 ##### Bad Examples\n 153 \n 154 Be VERY CAREFUL to avoid making these mistakes.\n 155 \n 156 ###### No Change Required Feedback\n 157 \n 158 These feedback examples mention points that require no changes. They SHOULD NOT have been included in the feedback.\n 159 \n 160 <feedback>\n 161 - MR title format\n 162   - The title `Draft: feat: remove custom gauge` follows the repo conventions (the `Draft:` prefix is allowed). No change required.\n 163 </feedback>\n 164 \n 165 <feedback>\n 166 - MR title format (repo rule)\n 167   - The title `Draft: feat: remove custom gauge` follows conventional commit style and is acceptable (the Draft prefix is allowed). No change needed.\n 168 </feedback>\n 169 \n 170 <feedback>\n 171 - Title: ok \u2014 \"Draft: feat: ...\" follows conventional-commit style with the draft prefix allowed.\n 172 </feedback>\n 173 \n 174 ### feedback\n 175 \n 176 Use this field to give some short overall feedback about the $CHANGE_NAME.\n 177 \n 178 If possible, try to start with the negative feedback and end with the positive feedback.\n 179 \n 180 Feel free to toss in a few emojis to give some extra charm to your feedback, but don't overdo it.\n 181 \n 182 DO NOT use more than a few sentences for this field.\n 183 \n 184 BE CERTAIN that the feedback does not contradict the background and style information given above (especially the information about which capabilities you have).\n",
    "code-review/test.sh": "   1 #!/bin/bash\n   2 # This directory is set up with a `test.bots` directory that contains pre-built\n   3 # context. Run the generate review generator script and check the output.\n   4 \n   5 # Build the current image\n   6 docker build . -t code-review-test\n   7 # Run the review, using environment variables from .env file\n   8 docker run --env-file .env -v ./test.bots:/repo/.bots/ code-review-test generate_llm_review.sh\n   9 # Output the result\n  10 cat test.bots/response/review.md\n  11 # TODO(#31): how can we grade the result?\n",
    "code-review/tools.py": "   1 from typing import Optional\n   2 import llm\n   3 \n   4 \n   5 def before_call(tool: Optional[llm.Tool], tool_call: llm.ToolCall):\n   6     \"\"\"\n   7     This is called before each tool call. It is useful for debugging.\n   8     \"\"\"\n   9     print(f\"Calling tool {tool.name} with arguments {tool_call.arguments}\")\n  10 \n  11 \n  12 # TODO: add tools once they are supported by llm-openrouter\n"
  },
  "changed_files": [
    ".github/workflows/code-review.yaml",
    "code-review/Dockerfile",
    "code-review/collect_context.sh",
    "code-review/generate_llm_review.py",
    "code-review/generate_llm_review.sh",
    "code-review/github_code_review.sh",
    "code-review/post_gitlab_review_comment.py",
    "code-review/system-prompts/review.md",
    "code-review/test.sh",
    "code-review/tools.py"
  ]
}