{
  "details": {
    "author": {
      "id": "MDQ6VXNlcjE3MjA5ODI4",
      "is_bot": false,
      "login": "Pertempto",
      "name": "Addison Emig"
    },
    "body": "Resolves #38",
    "state": "OPEN",
    "title": "feat: collect json context"
  },
  "comments": [
    {
      "username": "github-actions[bot]",
      "timestamp": "2025-08-28T19:25:24Z",
      "body": "# Changes Requested\n- PR title format\n  - As the scope portion is NOT required in the PR title, the current title `feat: collect json context` is acceptable under conventional commit style without needing a scope. No change needed.\n\n- Missing Changelog Entry\n  - Please add an entry to `CHANGELOG.md` describing the changes made in this pull request as required by `.bots/instructions.md`.\n\n- Non-serializable object saved to JSON in `collect_context.py`\n  - On line 67, `content` holds a `subprocess.CompletedProcess` object which is not JSON serializable. Only its stdout should be stored.\n  - Suggestion: Change line 67 from `file_contents[file_path] = content` to `file_contents[file_path] = content.stdout`.\n\n- Typo in `code-review/collect_context.py`\n  - Correct the typo from `filed` to `field` in the inline comment above line 67 within `collect_file_contents()` function.\n  \n- Typo in `code-review/system-prompts/review.md`\n  - On line 11, correct the typo `filed` to `field` in the phrase \"included in your context in the `selected_current_files` filed\".\n\n\n\n## Summary of Changes\n- Added a new Python script (`collect_context.py`) to collect code review context (details, comments, diffs, and file contents) in JSON format.\n- Updated `collect_context.sh` to generate structured JSON outputs for MR/PR details and comments, and to invoke the new Python script.\n- Modified `generate_llm_review.py` and `generate_llm_review.sh` to consume the new JSON context file (`.bots/context.json`) instead of the old markdown version.\n- Bumped the code-review Docker image tag in workflow configuration.\n- Adjusted instructions in `system-prompts/review.md` and `.bots/instructions.md` to reflect the new JSON-based context and clarify PR title conventions.\n\n\n\n## Overall Feedback\nThis PR modernizes the context collection by transitioning from markdown to structured JSON, which is a solid architectural improvement! \ud83c\udfaf @Pertempto. The introduction of `collect_context.py` centralizes the logic nicely \ud83d\udc4d. However, there are some important issues regarding correctness (like storing a non-serializable object), adherence to repository conventions (missing changelog), and a couple minor typos that need to be addressed. Also, please double check the GLab CLI usage in `collect_context.sh`. Once these items are resolved, this will be a great enhancement! \ud83d\udcaa\n\n\n\n",
      "id": 3234686262
    }
  ],
  "diffs": "diff --git a/.bots/instructions.md b/.bots/instructions.md\nindex b4ad267..deb3f5a 100644\n--- a/.bots/instructions.md\n+++ b/.bots/instructions.md\n@@ -1,6 +1,7 @@\n - Make sure that the pull request title follows the conventional commit style.\n \t- Alert the developer if the title is in the wrong format.\n-\t- Example of a correct title: fix: some bug\n-\t- Example of an incorrect title: Resolves \"#18 - some bug\"\n+\t- Example of a correct title: `fix: some bug`.\n+\t- Example of an incorrect title: `Resolves \"#18 - some bug\"`.\n+\t- The scope portion is NOT required in the PR title.\n - Make sure that the `CHANGELOG.md` file is included in the diffs.\n \t- Remind the PR author that the changelog must be updated with each PR.\ndiff --git a/.github/workflows/code-review.yaml b/.github/workflows/code-review.yaml\nindex 54caa88..b5c50f6 100644\n--- a/.github/workflows/code-review.yaml\n+++ b/.github/workflows/code-review.yaml\n@@ -9,7 +9,7 @@ jobs:\n     runs-on: ubuntu-latest\n \n     container:\n-      image: ghcr.io/mrs-electronics-inc/bots/code-review:0.10.0-rc6\n+      image: ghcr.io/mrs-electronics-inc/bots/code-review:0.10.0-rc14\n       volumes:\n         - ${{ github.workspace }}:/repo\n \ndiff --git a/CHANGELOG.md b/CHANGELOG.md\nindex e088f01..9d1aa70 100644\n--- a/CHANGELOG.md\n+++ b/CHANGELOG.md\n@@ -1,7 +1,8 @@\n # Changelog\n \n-## v0.10.0 (upcoming)\n+## v0.10.0\n \n+- [#39](https://github.com/mrs-electronics-inc/bots/pull/39) - feat: collect JSON context\n - [#37](https://github.com/mrs-electronics-inc/bots/pull/37) - feat: improve bot response\n - [#36](https://github.com/mrs-electronics-inc/bots/pull/36) - feat: system prompt improvements\n \ndiff --git a/code-review/Dockerfile b/code-review/Dockerfile\nindex 42c2cc9..8def8f0 100644\n--- a/code-review/Dockerfile\n+++ b/code-review/Dockerfile\n@@ -4,7 +4,7 @@ SHELL [\"/bin/bash\", \"-c\"]\n \n # Install core packages\n RUN apt update \\\n-    && apt install -y git wget gpg curl jq gettext file\n+    && apt install -y git wget gpg curl jq gettext file bat\n  \n # Install python packages\n COPY requirements.txt .\n@@ -30,6 +30,7 @@ RUN git config --global --add safe.directory /repo\n COPY gitlab_code_review.sh /bin\n COPY github_code_review.sh /bin\n COPY collect_context.sh /bin\n+COPY collect_context.py /bin\n COPY generate_llm_review.sh /bin\n COPY generate_llm_review.py /bin\n COPY post_gitlab_review_comment.py /bin\ndiff --git a/code-review/collect_context.py b/code-review/collect_context.py\nnew file mode 100755\nindex 0000000..a97bc11\n--- /dev/null\n+++ b/code-review/collect_context.py\n@@ -0,0 +1,109 @@\n+#!/usr/bin/env python3\n+\"\"\"\n+Collect context for code review and save as JSON.\n+\n+This script collects context for code review from either GitLab or GitHub,\n+including details, comments, diffs, and file contents, and saves them as JSON.\n+\"\"\"\n+import os\n+import json\n+import subprocess\n+import sys\n+\n+\n+def read_context_file(file_path):\n+    \"\"\"Read content from a context file.\"\"\"\n+    try:\n+        with open(file_path, 'r') as f:\n+            if file_path.endswith('.json'):\n+                return json.load(f)\n+            else:\n+                return f.read()\n+    except FileNotFoundError:\n+        print(f\"Warning: Context file not found: {file_path}\", file=sys.stderr)\n+        return \"\"\n+\n+\n+def collect_file_contents(changed_files, max_count=20, max_lines=400):\n+    \"\"\"Collect contents of changed files.\"\"\"\n+    file_contents = {}\n+    count = 0\n+\n+    for file_path in changed_files:\n+        if count >= max_count:\n+            break\n+\n+        file_path = file_path.strip()\n+        if not file_path or not os.path.isfile(file_path):\n+            continue\n+\n+        # Check if it's a text file\n+        try:\n+            result = subprocess.run(\n+                ['file', '-b', '--mime-type', file_path],\n+                capture_output=True,\n+                text=True,\n+                check=True\n+            )\n+            mime_type = result.stdout.strip()\n+\n+            if not mime_type.startswith('text/'):\n+                continue\n+\n+            # Check line count\n+            with open(file_path, 'r') as f:\n+                lines = f.readlines()\n+\n+            if len(lines) >= max_lines:\n+                continue\n+\n+            # Read file content using batcat so it includes line numbers\n+            batcat_result = subprocess.run(\n+                ['batcat', '--style=numbers,plain',\n+                    '--decorations=always', file_path],\n+                capture_output=True,\n+                text=True,\n+                check=True\n+            )\n+\n+            file_contents[file_path] = batcat_result.stdout\n+            count += 1\n+\n+        except Exception as e:\n+            print(f\"Error processing file {file_path}: {e}\", file=sys.stderr)\n+            continue\n+\n+    return file_contents\n+\n+\n+def main():\n+    \"\"\"Main function to collect context.\"\"\"\n+    print(\"Collecting context...\")\n+\n+    # Read context from files\n+    context = {}\n+    context['details'] = read_context_file('.bots/context/details.json')\n+    context['comments'] = read_context_file('.bots/context/comments.json')\n+    context['diffs'] = read_context_file('.bots/context/diffs')\n+\n+    # Get changed_files\n+    changed_files = os.getenv('CHANGED_FILES', '').splitlines()\n+\n+    # Collect file contents\n+    file_contents = collect_file_contents(changed_files)\n+    context['selected_current_files'] = file_contents\n+    context['changed_files'] = changed_files\n+\n+    # Save context as JSON\n+    output_path = '.bots/context.json'\n+    try:\n+        with open(output_path, 'w') as f:\n+            json.dump(context, f, indent=2)\n+        print(f\"Context saved to {output_path}\")\n+    except Exception as e:\n+        print(f\"Error saving context: {e}\", file=sys.stderr)\n+        sys.exit(1)\n+\n+\n+if __name__ == '__main__':\n+    main()\ndiff --git a/code-review/collect_context.sh b/code-review/collect_context.sh\nindex be50480..ac18855 100755\n--- a/code-review/collect_context.sh\n+++ b/code-review/collect_context.sh\n@@ -10,66 +10,35 @@ echo \"Collecting context...\"\n \n mkdir -p .bots/context\n \n-changed_files=\"\"\n+CHANGED_FILES=\"\"\n \n if [ \"$PLATFORM\" == \"gitlab\" ]; then\n     # Collect the merge request details\n-    glab mr view $CI_MERGE_REQUEST_IID > .bots/context/details\n+    glab mr view $CI_MERGE_REQUEST_IID --output json | jq '{title: .title, body: .description, author: .author, state: .state}' > .bots/context/details.json\n     # Collect the merge request comments\n     # For some reason the API returns them newest to oldest, so we have to\n     # reverse them with jq\n-    glab api \"projects/$CI_MERGE_REQUEST_PROJECT_ID/merge_requests/$CI_MERGE_REQUEST_IID/notes\" | jq '[reverse | .[] | {username: .author.username, name: .author.name, timestamp: .created_at, body: .body, id: .id}]' > .bots/context/comments\n+    glab api \"projects/$CI_MERGE_REQUEST_PROJECT_ID/merge_requests/$CI_MERGE_REQUEST_IID/notes\" | jq '[reverse | .[] | {username: .author.username, name: .author.name, timestamp: .created_at, body: .body, id: .id}]' > .bots/context/comments.json\n     # Collect the diffs\n     glab mr diff $CI_MERGE_REQUEST_IID --raw > .bots/context/diffs\n     # Collect the names of the changed files\n     git fetch origin $CI_MERGE_REQUEST_TARGET_BRANCH_NAME\n-    changed_files=$(git diff origin/$CI_MERGE_REQUEST_TARGET_BRANCH_NAME --name-only)\n+    CHANGED_FILES=$(git diff origin/$CI_MERGE_REQUEST_TARGET_BRANCH_NAME --name-only)\n elif [ \"$PLATFORM\" == \"github\" ]; then\n     # Collect the pull request details\n-    gh pr view $GITHUB_HEAD_REF > .bots/context/details\n+    gh pr view $GITHUB_HEAD_REF --json title,body,author,state > .bots/context/details.json\n     # Collect the pull request comments\n-    gh api \"repos/$GITHUB_REPOSITORY/issues/$PULL_REQUEST_NUMBER/comments\" | jq '[.[] | {username: .user.login, timestamp: .created_at, body: .body, id: .id}]' > .bots/context/comments\n+    gh api \"repos/$GITHUB_REPOSITORY/issues/$PULL_REQUEST_NUMBER/comments\" | jq '[.[] | {username: .user.login, timestamp: .created_at, body: .body, id: .id}]' > .bots/context/comments.json\n     # Collect the diffs\n     gh pr diff $GITHUB_HEAD_REF > .bots/context/diffs\n     # Collect the names of the changed files\n-    changed_files=$(gh pr diff $GITHUB_HEAD_REF --name-only)\n+    CHANGED_FILES=$(gh pr diff $GITHUB_HEAD_REF --name-only)\n else\n     echo \"Error: PLATFORM environment variable must be 'gitlab' or 'github'.\"\n     exit 1\n fi\n \n-context_files=(\"details\" \"diffs\" \"comments\")\n-# Combine context into a single `.bots/context.md` file\n-for f in \"${context_files[@]}\"; do\n-    echo -e \"\\n\\n===== BEGIN CONTEXT: $f =====\\n\\n\"; cat \".bots/context/$f\"; echo -e \"\\n\\n===== END CONTEXT: $f =====\\n\\n\"\n-done > .bots/context.md\n+export CHANGED_FILES\n \n-echo -e \"changed files:\\n$changed_files\"\n-if [ -z \"$changed_files\" ]; then\n-    echo \"Warning: No changed files detected.\"\n-fi\n-count=0\n-max_count=10\n-# Iterate through each changed file\n-while IFS= read -r file; do\n-    # Check if the file exists\n-    if [[ -f \"$file\" ]]; then\n-        # Only include text files\n-        mime_type=$(file -b --mime-type \"$file\")\n-        if [[ $mime_type == text/* ]]; then\n-            # Count the number of lines in the file\n-            line_count=$(wc -l < \"$file\")\n-            # Check if the line count is less than 400\n-            if (( line_count < 400 )); then\n-                echo \"===== BEGIN FILE: $file =====\" >> .bots/context.md;\n-                cat \"$file\" >> .bots/context.md;\n-                echo \"===== END FILE: $file =====\" >> .bots/context.md\n-                ((count++))\n-                # Exit early if max_count reached\n-                if (( count >= max_count )); then\n-                    break\n-                fi\n-            fi\n-        fi\n-    fi\n-done <<< \"$changed_files\"\n+# Run the Python script to collect context into JSON\n+collect_context.py\ndiff --git a/code-review/generate_llm_review.py b/code-review/generate_llm_review.py\nindex 0fb92b4..c099c2f 100755\n--- a/code-review/generate_llm_review.py\n+++ b/code-review/generate_llm_review.py\n@@ -5,7 +5,7 @@\n Input Files:\n - /bots/system-prompts/review.md: System prompt template with placeholders\n - .bots/instructions.md: Repository-specific instructions (optional)\n-- .bots/context.md: Context information about the code changes to review\n+- .bots/context.json: Context information about the code changes to review\n \n Output Files:\n - .bots/response/review.json: Generated review in JSON format with fields:\n@@ -68,10 +68,10 @@ def main():\n \n     # Read context\n     try:\n-        with open('.bots/context.md', 'r') as f:\n+        with open('.bots/context.json', 'r') as f:\n             context = f.read()\n     except FileNotFoundError:\n-        print(\"Error: Context file not found at .bots/context.md\",\n+        print(\"Error: Context file not found at .bots/context.json\",\n               file=sys.stderr)\n         sys.exit(1)\n \ndiff --git a/code-review/generate_llm_review.sh b/code-review/generate_llm_review.sh\nindex 94cb3f9..a355f59 100755\n--- a/code-review/generate_llm_review.sh\n+++ b/code-review/generate_llm_review.sh\n@@ -1,7 +1,7 @@\n #!/bin/bash\n \n # This script generates the LLM review.\n-# It expects the .bots/context.md file to exist.\n+# It expects the .bots/context.json file to exist.\n echo \"Generating LLM review...\"\n \n # Use the name expected by llm-openrouter\ndiff --git a/code-review/system-prompts/review.md b/code-review/system-prompts/review.md\nindex 5a8111f..6fd2d93 100644\n--- a/code-review/system-prompts/review.md\n+++ b/code-review/system-prompts/review.md\n@@ -8,7 +8,9 @@ YOU MUST strictly adhere to the \"Style\" and \"Response Fields\" instructions menti\n \n Please carefully review the $CHANGE_NAME details and comments. Also take a look at the git diffs.\n \n-The current contents of several of the changed files are also included in your context. Only non-binary files under 400 lines are included, and only a maximum of 10 files are included.\n+The current contents of several of the changed files are also included in your context in the `selected_current_files` field.\n+- Not every file is included in the context.\n+- The file contents are generated with the `batcat` command to add line numbers.\n \n Follow the given JSON schema for your output.\n   - A post-processing tool will convert each field into its own Markdown section in the final output.\n",
  "selected_current_files": {
    ".bots/instructions.md": "   1 - Make sure that the pull request title follows the conventional commit style.\n   2     - Alert the developer if the title is in the wrong format.\n   3     - Example of a correct title: `fix: some bug`.\n   4     - Example of an incorrect title: `Resolves \"#18 - some bug\"`.\n   5     - The scope portion is NOT required in the PR title.\n   6 - Make sure that the `CHANGELOG.md` file is included in the diffs.\n   7     - Remind the PR author that the changelog must be updated with each PR.\n",
    ".github/workflows/code-review.yaml": "   1 name: Code Review Bot\n   2 \n   3 on:\n   4   pull_request:\n   5     types: [opened, reopened, synchronize]\n   6 \n   7 jobs:\n   8   run_code_review_bot:\n   9     runs-on: ubuntu-latest\n  10 \n  11     container:\n  12       image: ghcr.io/mrs-electronics-inc/bots/code-review:0.10.0-rc14\n  13       volumes:\n  14         - ${{ github.workspace }}:/repo\n  15 \n  16     defaults:\n  17       run:\n  18         working-directory: /repo\n  19 \n  20     permissions:\n  21       pull-requests: write\n  22 \n  23     steps:\n  24       - name: Checkout code\n  25         uses: actions/checkout@v4\n  26 \n  27       - name: Run Code Review Bot\n  28         env:\n  29           OPENROUTER_KEY: ${{ secrets.API_KEY_CODE_REVIEW_BOT }}\n  30           GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n  31           PULL_REQUEST_NUMBER: ${{ github.event.pull_request.number }}\n  32         run: github_code_review.sh\n  33 \n  34       - name: Upload artifact including hidden files\n  35         uses: actions/upload-artifact@v4\n  36         with:\n  37           name: bots-directory\n  38           path: .bots/\n  39           include-hidden-files: true\n  40 \n",
    "CHANGELOG.md": "   1 # Changelog\n   2 \n   3 ## v0.10.0\n   4 \n   5 - [#39](https://github.com/mrs-electronics-inc/bots/pull/39) - feat: collect JSON context\n   6 - [#37](https://github.com/mrs-electronics-inc/bots/pull/37) - feat: improve bot response\n   7 - [#36](https://github.com/mrs-electronics-inc/bots/pull/36) - feat: system prompt improvements\n   8 \n   9 ## v0.9.1\n  10 \n  11 - [#34](https://github.com/mrs-electronics-inc/bots/pull/34) - fix: do not include binary files in context\n  12 \n  13 ## v0.9.0\n  14 \n  15 - [#33](https://github.com/mrs-electronics-inc/bots/pull/33) - feat: update gitlab comments\n  16 \n  17 ## v0.8.0\n  18 \n  19 - [#29](https://github.com/mrs-electronics-inc/bots/pull/29) - feat: improve system prompt\n  20 \n  21 ## v0.7.0\n  22 \n  23 - [#27](https://github.com/mrs-electronics-inc/bots/pull/27) - fix: give actual feedback\n  24 \n  25 ## v0.6.1\n  26 \n  27 - [#21](https://github.com/mrs-electronics-inc/bots/pull/21) - fix: missing summary title and incorrect checklist\n  28 \n  29 ## v0.6.0\n  30 \n  31 - [#20](https://github.com/mrs-electronics-inc/bots/pull/20) - fix: bot repeats itself\n  32 \n  33 ## v0.5.0\n  34 \n  35 - [#19](https://github.com/mrs-electronics-inc/bots/pull/19) - add current file contents\n  36 \n  37 ## v0.4.0\n  38 \n  39 - [#14](https://github.com/mrs-electronics-inc/bots/pull/14) - improve system prompt and include GitLab comments\n  40 - [#13](https://github.com/mrs-electronics-inc/bots/pull/13) - update example GitHub workflow in the README\n  41 \n  42 ## v0.3.0\n  43 \n  44 - [#12](https://github.com/mrs-electronics-inc/bots/pull/12) - add GitHub code review script\n  45 \n  46 ## v0.2.0\n  47 \n  48 - #9 - Add GitLab code review script\n  49 \n  50 ## v0.1.0\n  51 \n  52 - #7 - Install GitLab CLI\n  53 - #5 - Add llm CLI tool\n  54 - #4 - Add README\n  55 - #1 - Add basic Dockerfile\n",
    "code-review/Dockerfile": "   1 FROM python:3.12-slim\n   2 \n   3 SHELL [\"/bin/bash\", \"-c\"]\n   4 \n   5 # Install core packages\n   6 RUN apt update \\\n   7     && apt install -y git wget gpg curl jq gettext file bat\n   8  \n   9 # Install python packages\n  10 COPY requirements.txt .\n  11 RUN pip install --no-cache-dir -r requirements.txt\n  12 \n  13 # Install GitHub CLI\n  14 RUN curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | gpg --dearmor -o /usr/share/keyrings/githubcli-archive-keyring.gpg \\\n  15     && echo \"deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main\" | tee /etc/apt/sources.list.d/github-cli.list > /dev/null \\\n  16     && apt update && apt install -y gh;\n  17 \n  18 # Install GitLab CLI\n  19 RUN wget https://gitlab.com/gitlab-org/cli/-/releases/v1.67.0/downloads/glab_1.67.0_linux_amd64.deb \\\n  20     && dpkg -i glab_1.67.0_linux_amd64.deb\n  21 \n  22 # Clean up to reduce image size\n  23 RUN rm -rf /var/lib/apt/lists/*\n  24 \n  25 # This is where the git repo will be mounted.\n  26 WORKDIR /repo\n  27 RUN git config --global --add safe.directory /repo\n  28 \n  29 # Add scripts\n  30 COPY gitlab_code_review.sh /bin\n  31 COPY github_code_review.sh /bin\n  32 COPY collect_context.sh /bin\n  33 COPY collect_context.py /bin\n  34 COPY generate_llm_review.sh /bin\n  35 COPY generate_llm_review.py /bin\n  36 COPY post_gitlab_review_comment.py /bin\n  37 COPY system-prompts /bots/system-prompts\n  38 \n  39 CMD [\"/bin/bash\"]\n",
    "code-review/collect_context.py": "   1 #!/usr/bin/env python3\n   2 \"\"\"\n   3 Collect context for code review and save as JSON.\n   4 \n   5 This script collects context for code review from either GitLab or GitHub,\n   6 including details, comments, diffs, and file contents, and saves them as JSON.\n   7 \"\"\"\n   8 import os\n   9 import json\n  10 import subprocess\n  11 import sys\n  12 \n  13 \n  14 def read_context_file(file_path):\n  15     \"\"\"Read content from a context file.\"\"\"\n  16     try:\n  17         with open(file_path, 'r') as f:\n  18             if file_path.endswith('.json'):\n  19                 return json.load(f)\n  20             else:\n  21                 return f.read()\n  22     except FileNotFoundError:\n  23         print(f\"Warning: Context file not found: {file_path}\", file=sys.stderr)\n  24         return \"\"\n  25 \n  26 \n  27 def collect_file_contents(changed_files, max_count=20, max_lines=400):\n  28     \"\"\"Collect contents of changed files.\"\"\"\n  29     file_contents = {}\n  30     count = 0\n  31 \n  32     for file_path in changed_files:\n  33         if count >= max_count:\n  34             break\n  35 \n  36         file_path = file_path.strip()\n  37         if not file_path or not os.path.isfile(file_path):\n  38             continue\n  39 \n  40         # Check if it's a text file\n  41         try:\n  42             result = subprocess.run(\n  43                 ['file', '-b', '--mime-type', file_path],\n  44                 capture_output=True,\n  45                 text=True,\n  46                 check=True\n  47             )\n  48             mime_type = result.stdout.strip()\n  49 \n  50             if not mime_type.startswith('text/'):\n  51                 continue\n  52 \n  53             # Check line count\n  54             with open(file_path, 'r') as f:\n  55                 lines = f.readlines()\n  56 \n  57             if len(lines) >= max_lines:\n  58                 continue\n  59 \n  60             # Read file content using batcat so it includes line numbers\n  61             batcat_result = subprocess.run(\n  62                 ['batcat', '--style=numbers,plain',\n  63                     '--decorations=always', file_path],\n  64                 capture_output=True,\n  65                 text=True,\n  66                 check=True\n  67             )\n  68 \n  69             file_contents[file_path] = batcat_result.stdout\n  70             count += 1\n  71 \n  72         except Exception as e:\n  73             print(f\"Error processing file {file_path}: {e}\", file=sys.stderr)\n  74             continue\n  75 \n  76     return file_contents\n  77 \n  78 \n  79 def main():\n  80     \"\"\"Main function to collect context.\"\"\"\n  81     print(\"Collecting context...\")\n  82 \n  83     # Read context from files\n  84     context = {}\n  85     context['details'] = read_context_file('.bots/context/details.json')\n  86     context['comments'] = read_context_file('.bots/context/comments.json')\n  87     context['diffs'] = read_context_file('.bots/context/diffs')\n  88 \n  89     # Get changed_files\n  90     changed_files = os.getenv('CHANGED_FILES', '').splitlines()\n  91 \n  92     # Collect file contents\n  93     file_contents = collect_file_contents(changed_files)\n  94     context['selected_current_files'] = file_contents\n  95     context['changed_files'] = changed_files\n  96 \n  97     # Save context as JSON\n  98     output_path = '.bots/context.json'\n  99     try:\n 100         with open(output_path, 'w') as f:\n 101             json.dump(context, f, indent=2)\n 102         print(f\"Context saved to {output_path}\")\n 103     except Exception as e:\n 104         print(f\"Error saving context: {e}\", file=sys.stderr)\n 105         sys.exit(1)\n 106 \n 107 \n 108 if __name__ == '__main__':\n 109     main()\n",
    "code-review/collect_context.sh": "   1 #!/bin/bash\n   2 \n   3 # This script collects context for the code review.\n   4 # It expects the following environment variables to be set:\n   5 # - PLATFORM: 'gitlab' or 'github'\n   6 # - CI_MERGE_REQUEST_PROJECT_ID (if PLATFORM is gitlab)\n   7 # - CI_MERGE_REQUEST_IID (if PLATFORM is gitlab)\n   8 # - GITHUB_HEAD_REF (if PLATFORM is github)\n   9 echo \"Collecting context...\"\n  10 \n  11 mkdir -p .bots/context\n  12 \n  13 CHANGED_FILES=\"\"\n  14 \n  15 if [ \"$PLATFORM\" == \"gitlab\" ]; then\n  16     # Collect the merge request details\n  17     glab mr view $CI_MERGE_REQUEST_IID --output json | jq '{title: .title, body: .description, author: .author, state: .state}' > .bots/context/details.json\n  18     # Collect the merge request comments\n  19     # For some reason the API returns them newest to oldest, so we have to\n  20     # reverse them with jq\n  21     glab api \"projects/$CI_MERGE_REQUEST_PROJECT_ID/merge_requests/$CI_MERGE_REQUEST_IID/notes\" | jq '[reverse | .[] | {username: .author.username, name: .author.name, timestamp: .created_at, body: .body, id: .id}]' > .bots/context/comments.json\n  22     # Collect the diffs\n  23     glab mr diff $CI_MERGE_REQUEST_IID --raw > .bots/context/diffs\n  24     # Collect the names of the changed files\n  25     git fetch origin $CI_MERGE_REQUEST_TARGET_BRANCH_NAME\n  26     CHANGED_FILES=$(git diff origin/$CI_MERGE_REQUEST_TARGET_BRANCH_NAME --name-only)\n  27 elif [ \"$PLATFORM\" == \"github\" ]; then\n  28     # Collect the pull request details\n  29     gh pr view $GITHUB_HEAD_REF --json title,body,author,state > .bots/context/details.json\n  30     # Collect the pull request comments\n  31     gh api \"repos/$GITHUB_REPOSITORY/issues/$PULL_REQUEST_NUMBER/comments\" | jq '[.[] | {username: .user.login, timestamp: .created_at, body: .body, id: .id}]' > .bots/context/comments.json\n  32     # Collect the diffs\n  33     gh pr diff $GITHUB_HEAD_REF > .bots/context/diffs\n  34     # Collect the names of the changed files\n  35     CHANGED_FILES=$(gh pr diff $GITHUB_HEAD_REF --name-only)\n  36 else\n  37     echo \"Error: PLATFORM environment variable must be 'gitlab' or 'github'.\"\n  38     exit 1\n  39 fi\n  40 \n  41 export CHANGED_FILES\n  42 \n  43 # Run the Python script to collect context into JSON\n  44 collect_context.py\n",
    "code-review/generate_llm_review.py": "   1 #!/usr/bin/env python3\n   2 \"\"\"\n   3 Generate LLM code review using the LLM Python API.\n   4 \n   5 Input Files:\n   6 - /bots/system-prompts/review.md: System prompt template with placeholders\n   7 - .bots/instructions.md: Repository-specific instructions (optional)\n   8 - .bots/context.json: Context information about the code changes to review\n   9 \n  10 Output Files:\n  11 - .bots/response/review.json: Generated review in JSON format with fields:\n  12   - summary: Summary of changes\n  13   - raw_change_requests: Raw change requests\n  14   - change_requests: Formatted change requests\n  15   - feedback: Overall feedback\n  16 \n  17 Environment Variables:\n  18 - REVIEW_MODEL: Model to use (default: 'openrouter/qwen/qwen3-coder')\n  19 - PLATFORM: 'github' or 'gitlab' (default: 'github')\n  20 \n  21 The script reads the system prompt template, substitutes environment variables,\n  22 appends repository-specific instructions if available, reads the context,\n  23 and generates a structured review using the specified LLM model.\n  24 \"\"\"\n  25 import os\n  26 import sys\n  27 import llm\n  28 \n  29 MAX_RETRIES = 3\n  30 \n  31 \n  32 def main():\n  33     # Get environment variables\n  34     review_model = os.getenv('REVIEW_MODEL', 'openrouter/qwen/qwen3-coder')\n  35     platform = os.getenv('PLATFORM', 'github')\n  36 \n  37     # Set change name based on platform\n  38     change_name = \"pull request\" if platform == \"github\" else \"merge request\"\n  39 \n  40     # Get model\n  41     try:\n  42         model = llm.get_model(review_model)\n  43     except llm.UnknownModelError:\n  44         print(f\"Error: Unknown model '{review_model}'\", file=sys.stderr)\n  45         sys.exit(1)\n  46 \n  47     # Read system prompt template\n  48     try:\n  49         with open('/bots/system-prompts/review.md', 'r') as f:\n  50             system_prompt_template = f.read()\n  51     except FileNotFoundError:\n  52         print(\"Error: System prompt template not found\", file=sys.stderr)\n  53         sys.exit(1)\n  54 \n  55     # Substitute environment variables in system prompt\n  56     system_prompt = system_prompt_template.replace(\n  57         '$CHANGE_NAME', change_name).replace(\n  58         '$PLATFORM', platform)\n  59 \n  60     # Append repo-specific instructions if they exist\n  61     try:\n  62         with open('.bots/instructions.md', 'r') as f:\n  63             repo_instructions = f.read()\n  64             system_prompt += \"\\n\\n# Repo-specific Instructions\\n\\n\"\n  65             system_prompt += repo_instructions\n  66     except FileNotFoundError:\n  67         system_prompt += \"\\n\\n# Repo-specific Instructions\\n\\nNone.\"\n  68 \n  69     # Read context\n  70     try:\n  71         with open('.bots/context.json', 'r') as f:\n  72             context = f.read()\n  73     except FileNotFoundError:\n  74         print(\"Error: Context file not found at .bots/context.json\",\n  75               file=sys.stderr)\n  76         sys.exit(1)\n  77 \n  78     # Define schema\n  79     schema = {\n  80         \"type\": \"object\",\n  81         \"properties\": {\n  82             \"summary\": {\"type\": \"string\"},\n  83             \"raw_change_requests\": {\"type\": \"string\"},\n  84             \"change_requests\": {\"type\": \"string\"},\n  85             \"feedback\": {\"type\": \"string\"}\n  86         },\n  87         \"required\": [\"summary\", \"raw_change_requests\", \"change_requests\",\n  88                      \"feedback\"]\n  89     }\n  90 \n  91     # Generate response\n  92     response_text = get_response_text(model, system_prompt, context, schema)\n  93 \n  94     # Write response to JSON file\n  95     try:\n  96         with open('.bots/response/review.json', 'w') as f:\n  97             f.write(response_text)\n  98     except Exception as e:\n  99         print(f\"Error writing response file: {str(e)}\", file=sys.stderr)\n 100         sys.exit(1)\n 101 \n 102     print(\"Review generated successfully\")\n 103 \n 104 \n 105 def get_response_text(model, system_prompt, context, schema):\n 106     try:\n 107         for i in range(MAX_RETRIES):\n 108             response = model.prompt(\n 109                 context,\n 110                 system=system_prompt,\n 111                 presence_penalty=1.5,\n 112                 temperature=1.1,\n 113                 schema=schema\n 114             )\n 115             response_text = response.text()\n 116             print(\"Response length:\", len(response_text))\n 117             if len(response_text) > 10:\n 118                 return response_text\n 119             else:\n 120                 print(\"Received invalid response:\",\n 121                       response_text, file=sys.stderr)\n 122     except Exception as e:\n 123         print(f\"Error generating LLM response: {str(e)}\", file=sys.stderr)\n 124         sys.exit(1)\n 125 \n 126 \n 127 if __name__ == '__main__':\n 128     main()\n",
    "code-review/generate_llm_review.sh": "   1 #!/bin/bash\n   2 \n   3 # This script generates the LLM review.\n   4 # It expects the .bots/context.json file to exist.\n   5 echo \"Generating LLM review...\"\n   6 \n   7 # Use the name expected by llm-openrouter\n   8 LLM_OPENROUTER_KEY=OPENROUTER_KEY\n   9 \n  10 # Clean up the responses directory\n  11 [ -d \".bots/response\" ] && rm -rf \".bots/response\"\n  12 mkdir .bots/response\n  13 \n  14 # Generate the LLM review using Python script\n  15 generate_llm_review.py\n  16 \n  17 ls -lah .bots/response/review.json\n  18 \n  19 # Add the change requests, if necessary\n  20 if [ \"$(cat .bots/response/review.json | jq -r '.change_requests')\" != \"\" ]; then\n  21     echo \"# Changes Requested\" >> .bots/response/review.md\n  22     cat .bots/response/review.json | jq -r \".change_requests\" >> .bots/response/review.md\n  23     echo -e \"\\n\\n\" >> .bots/response/review.md\n  24 fi\n  25 \n  26 # Add the summary, if necessary\n  27 if [ \"$(cat .bots/response/review.json | jq -r '.summary')\" != \"\" ]; then\n  28     echo \"## Summary of Changes\" >> .bots/response/review.md\n  29     cat .bots/response/review.json | jq -r \".summary\" >> .bots/response/review.md\n  30     echo -e \"\\n\\n\" >> .bots/response/review.md\n  31 fi\n  32 \n  33 # Add the overall feedback\n  34 echo \"## Overall Feedback\" >> .bots/response/review.md\n  35 cat .bots/response/review.json | jq -r \".feedback\" >> .bots/response/review.md\n  36 echo -e \"\\n\\n\" >> .bots/response/review.md\n  37  \n  38 # TODO(#15): respond to comments and pipe to .bots/response/comments.md\n",
    "code-review/system-prompts/review.md": "   1 # Background\n   2  \n   3 You are a helpful senior software engineer who will review this $PLATFORM $CHANGE_NAME.\n   4 \n   5 The user will refer to you as the \"code review bot\"\n   6 \n   7 YOU MUST strictly adhere to the \"Style\" and \"Response Fields\" instructions mentioned below.\n   8 \n   9 Please carefully review the $CHANGE_NAME details and comments. Also take a look at the git diffs.\n  10 \n  11 The current contents of several of the changed files are also included in your context in the `selected_current_files` field.\n  12 - Not every file is included in the context.\n  13 - The file contents are generated with the `batcat` command to add line numbers.\n  14 \n  15 Follow the given JSON schema for your output.\n  16   - A post-processing tool will convert each field into its own Markdown section in the final output.\n  17   - Use an empty string for any fields where appropriate.\n  18 \n  19 Any comments authored by \"github-actions[bot]\" or \"Code Review Bot\" should be considered comments that you gave.\n  20 \n  21 You have the following capabilities:\n  22   - Leave feedback comments about the code changes.\n  23 You **do not** have the following capabilities:\n  24   - Create new $CHANGE_NAME\n  25   - Draft exact patches or changes\n  26   - Suggest specific edits to files\n  27   - Copy and paste changes\n  28   - Maintain a conversation with the author of the $CHANGE_NAME\n  29   - Respond to future comments\n  30   - Leave more detailed comments after your main review.\n  31 \n  32 **DO NOT** say anything like \"let me know\", \"I can re-run\", \"I can re-check\", or \"Please take a look below\". You **DO NOT** have the ability to receive future comments from the user!\n  33 \n  34 ### Examples\n  35 \n  36 (The following examples are surrounded in <feedback></feedback> to clearly delineate the different samples, DO NOT USE <feedback></feedback> in your feedback).\n  37 \n  38 #### Incorrect Capabilities\n  39  \n  40 A few examples of things you should NEVER SAY, because you DO NOT have these capabilities.\n  41 \n  42 <feedback>\n  43 - If you want, I can draft the exact lines to change for the unused import removal and the `gaugePercent` rename.\n  44 </feedback>\n  45 \n  46 <feedback>\n  47 - If you want, @user, I can re-run a targeted repo search for `girix_code_gauge`/`GxRadialGauge` references and point to any leftover usages. Additionally, I can re-check the `FramedDisplay` sizing assumptions after you try `mainAxisSize: MainAxisSize.min` on the inner `Column`.\"}\n  48 </feedback>\n  49 \n  50 <feedback>\n  51 If you want, @user, I can re-run a targeted repo search for girix_code_gauge/GxRadialGauge references and point to any leftover usages. Additionally, I can re-check the FramedDisplay sizing assumptions after you try mainAxisSize: MainAxisSize.min on the inner Column.\n  52 </feedback>\n  53 \n  54 <feedback>\n  55 If helpful, I can provide a short checklist you can paste into the postdeploy hook to: (1) write the per-process check process block, (2) monit -t the config, and (3) enable/start monit and reload only on success. I won\u2019t create patches here, but can paste the checklist for you to adapt. Let me know.\n  56 </feedback>\n  57 \n  58 <feedback>\n  59 If you want, I can prepare a concrete patch for the postdeploy hook that implements: per-process check (with matching or pidfile), start/stop programs, temp-file validation, idempotent mv, chown/chmod, use command -v, and safer monit enabling/reloading. Tell me whether web produces a pidfile and its path (or provide the process command to match) and I\u2019ll draft the hook.\n  60 </feedback>\n  61 \n  62 <feedback>\n  63 I'll leave more detailed feedback directly in the PR comments.\n  64 </feedback>\n  65 \n  66 <feedback>\n  67 I have a few minor suggestions to further improve consistency and correctness. Please take a look below \ud83d\udc47\n  68 </feedback>\n  69 \n  70 ## Style\n  71 \n  72 Use a friendly and concise style.\n  73 \n  74 Use verbosity=short for your responses.\n  75 \n  76 Tag the $CHANGE_NAME author directly when it is helpful to get their attention about something.\n  77   - Example of tagging someone: @username, some comment here.\n  78 \n  79 Don't be afraid to give negative feedback, but be sure it is accurate.\n  80 \n  81 Use bullet point lists instead of numbered lists.\n  82 \n  83 All code should be surrounded by the proper Markdown backticks, both inline and block style.\n  84 \n  85 When you mention a specific file path, surround it with backticks so that it is easier to read.\n  86 \n  87 ## Response Fields\n  88 \n  89 ### summary\n  90 \n  91 Set this field to a basic summary of the changes made in the $CHANGE_NAME.\n  92 \n  93 BE ABSOLUTELY SURE to use bullet-point list form.\n  94 \n  95 This field should be formatted as a newline-separated string.\n  96 \n  97 ### raw_change_requests\n  98 \n  99 Use this field for all change requests you have in the following areas:\n 100 - Best Practices\n 101 - Security\n 102 - Performance\n 103 - Potential Bugs\n 104 - Inconsistencies\n 105 - Incorrect grammar\n 106 - Changes mentioned in the description that seem to be missing from the diffs\n 107 - TODO comments added to the diffs that don't include an issue number\n 108 - Anything mentioned in the repo-specific instructions \n 109 \n 110 This field should be formatted as a newline-separated string.\n 111 \n 112 #### TODO Format\n 113 \n 114 Example of correct TODO format (no need to leave feedback on this kind):\n 115 ```diff\n 116 + # TODO(#274) - this diff correctly includes an issue number\n 117 ```\n 118 \n 119 Example of incorrect TODO format (it should be flagged to the author):\n 120 ```diff\n 121 + # TODO - this diff does not include an issue number, it should be flagged\n 122 ```\n 123 \n 124 ### change_requests\n 125 \n 126 Use this field to clean up `raw_change_requests` to follow the following rules.\n 127 \n 128 \n 129 #### Important Rules\n 130 - This field should be formatted as a newline-separated string.\n 131 - Set this field to an empty string if there are no change requests.\n 132 - For each request, please include at least one possible solution.\n 133 - ONLY mention feedback that should be addressed\n 134 - DO NOT mention feedback that are already resolved and/or don't require changes.\n 135 - Compare `raw_change_requests` with the following examples and remove anything that should be avoided.\n 136 \n 137 #### Feedback Examples\n 138  \n 139 (The following examples are surrounded in <feedback></feedback> to clearly delineate the different samples, DO NOT USE <feedback></feedback> in your feedback).\n 140 \n 141 ##### Good Examples\n 142 \n 143 Emulate the helpfulness of these examples in your feedback.\n 144 \n 145 <feedback>\n 146 - FramedDisplay sizing & layout (UI test)\n 147   - Suggestion: verify the new layout on small and large devices (simulator and real) to ensure FittedBox + FramedDisplay sizing behaves as expected. If text or icon scales oddly, consider explicit constraints for the icon and number.\n 148 </feedback>\n 149 \n 150 ##### Bad Examples\n 151 \n 152 Be VERY CAREFUL to avoid making these mistakes.\n 153 \n 154 ###### No Change Required Feedback\n 155 \n 156 These feedback examples mention points that require no changes. They SHOULD NOT have been included in the feedback.\n 157 \n 158 <feedback>\n 159 - MR title format\n 160   - The title `Draft: feat: remove custom gauge` follows the repo conventions (the `Draft:` prefix is allowed). No change required.\n 161 </feedback>\n 162 \n 163 <feedback>\n 164 - MR title format (repo rule)\n 165   - The title `Draft: feat: remove custom gauge` follows conventional commit style and is acceptable (the Draft prefix is allowed). No change needed.\n 166 </feedback>\n 167 \n 168 <feedback>\n 169 - Title: ok \u2014 \"Draft: feat: ...\" follows conventional-commit style with the draft prefix allowed.\n 170 </feedback>\n 171 \n 172 ### feedback\n 173 \n 174 Use this field to give some short overall feedback about the $CHANGE_NAME.\n 175 \n 176 If possible, try to start with the negative feedback and end with the positive feedback.\n 177 \n 178 Feel free to toss in a few emojis to give some extra charm to your feedback, but don't overdo it.\n 179 \n 180 DO NOT use more than a few sentences for this field.\n 181 \n 182 BE CERTAIN that the feedback does not contradict the background and style information given above (especially the information about which capabilities you have).\n"
  },
  "changed_files": [
    ".bots/instructions.md",
    ".github/workflows/code-review.yaml",
    "CHANGELOG.md",
    "code-review/Dockerfile",
    "code-review/collect_context.py",
    "code-review/collect_context.sh",
    "code-review/generate_llm_review.py",
    "code-review/generate_llm_review.sh",
    "code-review/system-prompts/review.md"
  ]
}
